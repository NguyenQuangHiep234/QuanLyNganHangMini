package com.bank.client.gui;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

import java.awt.*;
import java.awt.event.*;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.text.DecimalFormat;

import com.bank.client.BankClient;
import com.bank.common.Account;
import com.bank.common.Transaction;

public class AdminFrame extends JFrame {
    private BankClient client;
    private JTable accountsTable;
    private DefaultTableModel tableModel;
    private DecimalFormat currencyFormat;
    private Map<String, Account> accountsMap; // Map ƒë·ªÉ l∆∞u Account objects

    public AdminFrame(BankClient client) {
        this.client = client;
        this.currencyFormat = new DecimalFormat("#,### VND");
        this.accountsMap = new HashMap<>();
        initializeUI();
        loadAccountsData();
    }

    private void initializeUI() {
        setTitle("Qu·∫£n tr·ªã h·ªá th·ªëng - Ng√¢n h√†ng Mini");
        setSize(1000, 700);
        setLocationRelativeTo(null);

        // Main panel with modern background
        JPanel mainPanel = new JPanel(new BorderLayout(10, 10)) {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                int w = getWidth(), h = getHeight();
                // Subtle gradient background
                Color color1 = new Color(248, 250, 252);
                Color color2 = new Color(241, 245, 249);
                GradientPaint gp = new GradientPaint(0, 0, color1, 0, h, color2);
                g2d.setPaint(gp);
                g2d.fillRect(0, 0, w, h);
            }
        };
        mainPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));
        mainPanel.setOpaque(false);

        // Modern header with gradient
        JPanel headerPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                int w = getWidth(), h = getHeight();
                int arc = 20;

                // Admin gradient - darker blue
                Color color1 = new Color(21, 101, 192);
                Color color2 = new Color(69, 90, 100);
                GradientPaint gp = new GradientPaint(0, 0, color1, 0, h, color2);
                g2d.setPaint(gp);
                g2d.fillRoundRect(0, 0, w, h, arc, arc);

                // Subtle shadow
                g2d.setColor(new Color(0, 0, 0, 50));
                g2d.fillRoundRect(2, 2, w - 4, h - 4, arc, arc);
            }
        };
        headerPanel.setLayout(new BorderLayout());
        headerPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        headerPanel.setPreferredSize(new Dimension(1000, 80));
        headerPanel.setOpaque(false);

        // Header content
        JLabel lblTitle = new JLabel("‚öôÔ∏è QU·∫¢N TR·ªä H·ªÜ TH·ªêNG", JLabel.LEFT);
        lblTitle.setFont(new Font("Segoe UI", Font.BOLD, 24));
        lblTitle.setForeground(Color.WHITE);
        headerPanel.add(lblTitle, BorderLayout.WEST);

        JLabel lblSubtitle = new JLabel("Ng√¢n h√†ng Mini - Qu·∫£n l√Ω t√†i kho·∫£n", JLabel.RIGHT);
        lblSubtitle.setFont(new Font("Segoe UI Light", Font.PLAIN, 14));
        lblSubtitle.setForeground(new Color(220, 220, 220));
        headerPanel.add(lblSubtitle, BorderLayout.EAST);

        // T·∫°o table ƒë·ªÉ hi·ªÉn th·ªã accounts
        String[] columns = { "S·ªë TK", "T√™n ch·ªß TK", "S·ªë d∆∞", "M·∫≠t kh·∫©u", "H√†nh ƒë·ªông" };
        tableModel = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 3 || column == 4; // Cho ph√©p edit c·ªôt m·∫≠t kh·∫©u v√† h√†nh ƒë·ªông
            }
        };

        accountsTable = new JTable(tableModel);
        accountsTable.getColumnModel().getColumn(2).setCellRenderer(new RightAlignRenderer());

        // Th√™m custom renderer cho c·ªôt m·∫≠t kh·∫©u v·ªõi bi·ªÉu t∆∞·ª£ng con m·∫Øt
        accountsTable.getColumnModel().getColumn(3).setCellRenderer(new PasswordRenderer());
        accountsTable.getColumnModel().getColumn(3).setCellEditor(new PasswordEditor());

        // Th√™m 6 button v√†o c·ªôt h√†nh ƒë·ªông (b·ªè n√∫t xem m·∫≠t kh·∫©u v√¨ ƒë√£ chuy·ªÉn v√†o c·ªôt m·∫≠t
        // kh·∫©u)
        accountsTable.getColumn("H√†nh ƒë·ªông").setCellRenderer(new ButtonRenderer());
        accountsTable.getColumn("H√†nh ƒë·ªông").setCellEditor(new ButtonEditor(new JCheckBox(), client));

        // Modern table styling
        accountsTable.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        accountsTable.setRowHeight(60);
        accountsTable.setGridColor(new Color(224, 224, 224));
        accountsTable.setSelectionBackground(new Color(25, 118, 210, 50));
        accountsTable.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 14));
        accountsTable.getTableHeader().setBackground(new Color(245, 245, 245));
        accountsTable.getTableHeader().setForeground(new Color(33, 33, 33));

        JScrollPane scrollPane = new JScrollPane(accountsTable);
        scrollPane.setBorder(BorderFactory.createLineBorder(new Color(200, 200, 200), 1));

        // Modern button panel
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 20));
        buttonPanel.setOpaque(false);

        JButton btnRefresh = createModernButton("üîÑ L√†m m·ªõi", new Color(76, 175, 80), Color.WHITE);
        btnRefresh.setPreferredSize(new Dimension(150, 45));
        btnRefresh.addActionListener(e -> loadAccountsData());

        JButton btnLogout = createModernButton("üö™ ƒêƒÉng xu·∫•t", new Color(244, 67, 54), Color.WHITE);
        btnLogout.setPreferredSize(new Dimension(150, 45));
        btnLogout.addActionListener(e -> {
            dispose();
            new LoginFrame(client);
        });

        buttonPanel.add(btnRefresh);
        buttonPanel.add(btnLogout);

        mainPanel.add(lblTitle, BorderLayout.NORTH);
        mainPanel.add(headerPanel, BorderLayout.NORTH);
        mainPanel.add(scrollPane, BorderLayout.CENTER);
        mainPanel.add(buttonPanel, BorderLayout.SOUTH);

        add(mainPanel);
        setVisible(true);
    }

    private void loadAccountsData() {
        try {
            List<Account> accounts = client.getBankService().getAllAccounts();
            tableModel.setRowCount(0);
            accountsMap.clear(); // Clear existing map

            for (Account account : accounts) {
                // L·ªçc b·ªè t√†i kho·∫£n admin kh·ªèi danh s√°ch
                if ("admin".equals(account.getAccountNumber())) {
                    continue; // B·ªè qua t√†i kho·∫£n admin
                }

                // Store account in map for later reference
                accountsMap.put(account.getAccountNumber(), account);

                Object[] row = {
                        account.getAccountNumber(),
                        account.getAccountHolder(),
                        currencyFormat.format(account.getBalance()),
                        "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢", // ·∫®n m·∫≠t kh·∫©u
                        "Set ti·ªÅn" // Button text
                };
                tableModel.addRow(row);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "L·ªói t·∫£i d·ªØ li·ªáu: " + e.getMessage());
        }
    }

    // Custom renderer ƒë·ªÉ cƒÉn ph·∫£i s·ªë d∆∞
    class RightAlignRenderer extends DefaultTableCellRenderer {
        public RightAlignRenderer() {
            setHorizontalAlignment(JLabel.RIGHT);
        }
    }

    // Custom renderer cho c·ªôt m·∫≠t kh·∫©u v·ªõi bi·ªÉu t∆∞·ª£ng con m·∫Øt
    class PasswordRenderer extends JPanel implements TableCellRenderer {
        private JLabel passwordLabel;
        private JLabel eyeLabel;

        public PasswordRenderer() {
            setLayout(new BorderLayout(5, 0));
            setOpaque(true);

            passwordLabel = new JLabel("‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢");
            passwordLabel.setHorizontalAlignment(JLabel.LEFT);

            eyeLabel = new JLabel("üëÅ");
            eyeLabel.setHorizontalAlignment(JLabel.CENTER);
            eyeLabel.setPreferredSize(new Dimension(30, 20));
            eyeLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));

            add(passwordLabel, BorderLayout.CENTER);
            add(eyeLabel, BorderLayout.EAST);
        }

        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {

            if (isSelected) {
                setBackground(table.getSelectionBackground());
                setForeground(table.getSelectionForeground());
                passwordLabel.setForeground(table.getSelectionForeground());
            } else {
                setBackground(table.getBackground());
                setForeground(table.getForeground());
                passwordLabel.setForeground(table.getForeground());
            }

            return this;
        }
    }

    // Custom editor cho c·ªôt m·∫≠t kh·∫©u
    class PasswordEditor extends DefaultCellEditor {
        private JPanel panel;
        private JLabel passwordLabel;
        private JLabel eyeLabel;
        private String accountNumber;
        private boolean passwordVisible = false;

        public PasswordEditor() {
            super(new JCheckBox());

            panel = new JPanel(new BorderLayout(5, 0));
            panel.setOpaque(true);

            passwordLabel = new JLabel("‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢");
            passwordLabel.setHorizontalAlignment(JLabel.LEFT);

            eyeLabel = new JLabel("üëÅ");
            eyeLabel.setHorizontalAlignment(JLabel.CENTER);
            eyeLabel.setPreferredSize(new Dimension(30, 20));
            eyeLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));

            eyeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent e) {
                    togglePasswordVisibility();
                }
            });

            panel.add(passwordLabel, BorderLayout.CENTER);
            panel.add(eyeLabel, BorderLayout.EAST);
        }

        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {
            accountNumber = (String) table.getValueAt(row, 0);
            passwordVisible = false;
            passwordLabel.setText("‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢");
            eyeLabel.setText("üëÅ");
            return panel;
        }

        public Object getCellEditorValue() {
            return "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢";
        }

        private void togglePasswordVisibility() {
            try {
                if (!passwordVisible) {
                    // Hi·ªÉn th·ªã m·∫≠t kh·∫©u
                    String password = client.getBankService().getUserPassword(accountNumber);
                    if (password != null) {
                        passwordLabel.setText(password);
                        eyeLabel.setText("üôà");
                        passwordVisible = true;
                    }
                } else {
                    // ·∫®n m·∫≠t kh·∫©u
                    passwordLabel.setText("‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢");
                    eyeLabel.setText("üëÅ");
                    passwordVisible = false;
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(panel, "L·ªói: " + e.getMessage());
            }
        }
    }

    // Custom renderer cho panel 6 buttons
    class ButtonRenderer extends JPanel implements TableCellRenderer {
        private JButton depositBtn, withdrawBtn, changePasswordBtn, historyBtn, lockBtn, deleteBtn;

        public ButtonRenderer() {
            setLayout(new GridLayout(2, 3, 2, 2));
            setOpaque(true);

            // N√∫t N·∫°p ti·ªÅn
            depositBtn = new JButton("Add");
            depositBtn.setBackground(new Color(40, 167, 69));
            depositBtn.setForeground(Color.WHITE);
            depositBtn.setFont(new Font("Arial", Font.BOLD, 8));
            depositBtn.setToolTipText("N·∫°p ti·ªÅn v√†o t√†i kho·∫£n");
            depositBtn.setFocusPainted(false);
            depositBtn.setBorderPainted(false);

            // N√∫t R√∫t ti·ªÅn
            withdrawBtn = new JButton("Sub");
            withdrawBtn.setBackground(new Color(220, 53, 69));
            withdrawBtn.setForeground(Color.WHITE);
            withdrawBtn.setFont(new Font("Arial", Font.BOLD, 8));
            withdrawBtn.setToolTipText("R√∫t ti·ªÅn t·ª´ t√†i kho·∫£n");
            withdrawBtn.setFocusPainted(false);
            withdrawBtn.setBorderPainted(false);

            // N√∫t ƒê·ªïi m·∫≠t kh·∫©u
            changePasswordBtn = new JButton("Pwd");
            changePasswordBtn.setBackground(new Color(0, 123, 255));
            changePasswordBtn.setForeground(Color.WHITE);
            changePasswordBtn.setFont(new Font("Arial", Font.BOLD, 8));
            changePasswordBtn.setToolTipText("ƒê·ªïi m·∫≠t kh·∫©u");
            changePasswordBtn.setFocusPainted(false);
            changePasswordBtn.setBorderPainted(false);

            // N√∫t Xem l·ªãch s·ª≠
            historyBtn = new JButton("His");
            historyBtn.setBackground(new Color(108, 117, 125));
            historyBtn.setForeground(Color.WHITE);
            historyBtn.setFont(new Font("Arial", Font.BOLD, 10));
            historyBtn.setToolTipText("Xem l·ªãch s·ª≠ giao d·ªãch");
            historyBtn.setFocusPainted(false);
            historyBtn.setBorderPainted(false);

            // N√∫t Kh√≥a/M·ªü kh√≥a
            lockBtn = new JButton("Lock");
            lockBtn.setBackground(new Color(255, 193, 7));
            lockBtn.setForeground(Color.WHITE);
            lockBtn.setFont(new Font("Arial", Font.BOLD, 10));
            lockBtn.setToolTipText("Kh√≥a t√†i kho·∫£n");
            lockBtn.setFocusPainted(false);
            lockBtn.setBorderPainted(false);

            // N√∫t X√≥a
            deleteBtn = new JButton("Del");
            deleteBtn.setBackground(new Color(220, 53, 69));
            deleteBtn.setForeground(Color.WHITE);
            deleteBtn.setFont(new Font("Arial", Font.BOLD, 10));
            deleteBtn.setToolTipText("X√≥a t√†i kho·∫£n");
            deleteBtn.setFocusPainted(false);
            deleteBtn.setBorderPainted(false);

            add(depositBtn);
            add(withdrawBtn);
            add(changePasswordBtn);
            add(historyBtn);
            add(lockBtn);
            add(deleteBtn);
        }

        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {

            // Get account number from the first column
            String accountNumber = (String) table.getValueAt(row, 0);
            Account account = accountsMap.get(accountNumber);

            if (account != null && account.isLocked()) {
                // Account is locked - show UNLOCK button
                lockBtn.setText("Unlock");
                lockBtn.setBackground(new Color(40, 167, 69)); // Green color
                lockBtn.setToolTipText("M·ªü kh√≥a t√†i kho·∫£n");
            } else {
                // Account is not locked - show LOCK button
                lockBtn.setText("Lock");
                lockBtn.setBackground(new Color(255, 193, 7)); // Yellow color
                lockBtn.setToolTipText("Kh√≥a t√†i kho·∫£n");
            }

            return this;
        }
    }

    // Custom editor cho panel 6 buttons
    class ButtonEditor extends DefaultCellEditor {
        private JPanel panel;
        private JButton depositBtn, withdrawBtn, changePasswordBtn, historyBtn, lockBtn, deleteBtn;
        private String accountNumber;
        private BankClient client;

        public ButtonEditor(JCheckBox checkBox, BankClient client) {
            super(checkBox);
            this.client = client;

            panel = new JPanel(new GridLayout(2, 3, 2, 2));
            panel.setOpaque(true);

            // N√∫t N·∫°p ti·ªÅn
            depositBtn = new JButton("Add");
            depositBtn.setBackground(new Color(40, 167, 69));
            depositBtn.setForeground(Color.WHITE);
            depositBtn.setFont(new Font("Arial", Font.BOLD, 8));
            depositBtn.setToolTipText("N·∫°p ti·ªÅn v√†o t√†i kho·∫£n");
            depositBtn.setFocusPainted(false);
            depositBtn.setBorderPainted(false);
            depositBtn.addActionListener(e -> {
                fireEditingStopped();
                showDepositDialog(accountNumber);
            });

            // N√∫t R√∫t ti·ªÅn
            withdrawBtn = new JButton("Sub");
            withdrawBtn.setBackground(new Color(220, 53, 69));
            withdrawBtn.setForeground(Color.WHITE);
            withdrawBtn.setFont(new Font("Arial", Font.BOLD, 8));
            withdrawBtn.setToolTipText("R√∫t ti·ªÅn t·ª´ t√†i kho·∫£n");
            withdrawBtn.setFocusPainted(false);
            withdrawBtn.setBorderPainted(false);
            withdrawBtn.addActionListener(e -> {
                fireEditingStopped();
                showWithdrawDialog(accountNumber);
            });

            // N√∫t ƒê·ªïi m·∫≠t kh·∫©u
            changePasswordBtn = new JButton("Pwd");
            changePasswordBtn.setBackground(new Color(0, 123, 255));
            changePasswordBtn.setForeground(Color.WHITE);
            changePasswordBtn.setFont(new Font("Arial", Font.BOLD, 8));
            changePasswordBtn.setToolTipText("ƒê·ªïi m·∫≠t kh·∫©u");
            changePasswordBtn.setFocusPainted(false);
            changePasswordBtn.setBorderPainted(false);
            changePasswordBtn.addActionListener(e -> {
                fireEditingStopped();
                showChangePasswordDialog(accountNumber);
            });

            // N√∫t Xem l·ªãch s·ª≠
            historyBtn = new JButton("His");
            historyBtn.setBackground(new Color(108, 117, 125));
            historyBtn.setForeground(Color.WHITE);
            historyBtn.setFont(new Font("Arial", Font.BOLD, 8));
            historyBtn.setToolTipText("Xem l·ªãch s·ª≠ giao d·ªãch");
            historyBtn.setFocusPainted(false);
            historyBtn.setBorderPainted(false);
            historyBtn.addActionListener(e -> {
                fireEditingStopped();
                showUserHistoryDialog(accountNumber);
            });

            // N√∫t Kh√≥a/M·ªü kh√≥a
            lockBtn = new JButton("Lock");
            lockBtn.setBackground(new Color(255, 193, 7));
            lockBtn.setForeground(Color.WHITE);
            lockBtn.setFont(new Font("Arial", Font.BOLD, 8));
            lockBtn.setToolTipText("Kh√≥a t√†i kho·∫£n");
            lockBtn.setFocusPainted(false);
            lockBtn.setBorderPainted(false);
            lockBtn.addActionListener(e -> {
                fireEditingStopped();
                Account account = accountsMap.get(accountNumber);
                if (account != null && account.isLocked()) {
                    // Account is locked - unlock it
                    showUnlockAccountDialog(accountNumber);
                } else {
                    // Account is not locked - lock it
                    showLockAccountDialog(accountNumber);
                }
            });

            // N√∫t X√≥a
            deleteBtn = new JButton("Del");
            deleteBtn.setBackground(new Color(220, 53, 69));
            deleteBtn.setForeground(Color.WHITE);
            deleteBtn.setFont(new Font("Arial", Font.BOLD, 8));
            deleteBtn.setToolTipText("X√≥a t√†i kho·∫£n");
            deleteBtn.setFocusPainted(false);
            deleteBtn.setBorderPainted(false);
            deleteBtn.addActionListener(e -> {
                fireEditingStopped();
                showDeleteAccountDialog(accountNumber);
            });

            panel.add(depositBtn);
            panel.add(withdrawBtn);
            panel.add(changePasswordBtn);
            panel.add(historyBtn);
            panel.add(lockBtn);
            panel.add(deleteBtn);
        }

        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {
            accountNumber = (String) table.getValueAt(row, 0);

            // Update lock button based on account status
            Account account = accountsMap.get(accountNumber);
            if (account != null && account.isLocked()) {
                // Account is locked - show UNLOCK button
                lockBtn.setText("Unlock");
                lockBtn.setBackground(new Color(40, 167, 69)); // Green color
                lockBtn.setToolTipText("M·ªü kh√≥a t√†i kho·∫£n");
            } else {
                // Account is not locked - show LOCK button
                lockBtn.setText("Lock");
                lockBtn.setBackground(new Color(255, 193, 7)); // Yellow color
                lockBtn.setToolTipText("Kh√≥a t√†i kho·∫£n");
            }

            return panel;
        }

        public Object getCellEditorValue() {
            return "Actions";
        }

        private void showLockAccountDialog(String accountNumber) {
            // Y√™u c·∫ßu l√Ω do kh√≥a
            String reason = JOptionPane.showInputDialog(AdminFrame.this,
                    "Nh·∫≠p l√Ω do kh√≥a t√†i kho·∫£n " + accountNumber + ":",
                    "Kh√≥a t√†i kho·∫£n",
                    JOptionPane.WARNING_MESSAGE);

            if (reason != null && !reason.trim().isEmpty()) {
                int result = JOptionPane.showConfirmDialog(AdminFrame.this,
                        "B·∫°n c√≥ ch·∫Øc mu·ªën kh√≥a t√†i kho·∫£n " + accountNumber + "?\n" +
                                "L√Ω do: " + reason,
                        "X√°c nh·∫≠n kh√≥a t√†i kho·∫£n",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE);

                if (result == JOptionPane.YES_OPTION) {
                    try {
                        if (client.getBankService().lockAccount(accountNumber, reason)) {
                            JOptionPane.showMessageDialog(AdminFrame.this,
                                    "T√†i kho·∫£n " + accountNumber + " ƒë√£ ƒë∆∞·ª£c kh√≥a th√†nh c√¥ng!\nL√Ω do: " + reason,
                                    "Kh√≥a t√†i kho·∫£n th√†nh c√¥ng",
                                    JOptionPane.INFORMATION_MESSAGE);
                            loadAccountsData(); // Refresh table
                        } else {
                            JOptionPane.showMessageDialog(AdminFrame.this,
                                    "Kh√≥a t√†i kho·∫£n th·∫•t b·∫°i!",
                                    "L·ªói",
                                    JOptionPane.ERROR_MESSAGE);
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(AdminFrame.this, "L·ªói: " + e.getMessage(), "L·ªói",
                                JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }

        private void showUnlockAccountDialog(String accountNumber) {
            int result = JOptionPane.showConfirmDialog(AdminFrame.this,
                    "B·∫°n c√≥ ch·∫Øc mu·ªën m·ªü kh√≥a t√†i kho·∫£n " + accountNumber + "?",
                    "X√°c nh·∫≠n m·ªü kh√≥a t√†i kho·∫£n",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.INFORMATION_MESSAGE);

            if (result == JOptionPane.YES_OPTION) {
                try {
                    if (client.getBankService().unlockAccount(accountNumber)) {
                        JOptionPane.showMessageDialog(AdminFrame.this,
                                "T√†i kho·∫£n " + accountNumber + " ƒë√£ ƒë∆∞·ª£c m·ªü kh√≥a th√†nh c√¥ng!",
                                "M·ªü kh√≥a t√†i kho·∫£n th√†nh c√¥ng",
                                JOptionPane.INFORMATION_MESSAGE);
                        loadAccountsData(); // Refresh table
                    } else {
                        JOptionPane.showMessageDialog(AdminFrame.this,
                                "M·ªü kh√≥a t√†i kho·∫£n th·∫•t b·∫°i!",
                                "L·ªói",
                                JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(AdminFrame.this, "L·ªói: " + e.getMessage(), "L·ªói",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        }

        private void showDeleteAccountDialog(String accountNumber) {
            // Y√™u c·∫ßu l√Ω do x√≥a
            String reason = JOptionPane.showInputDialog(AdminFrame.this,
                    "Nh·∫≠p l√Ω do x√≥a t√†i kho·∫£n " + accountNumber + ":",
                    "X√≥a t√†i kho·∫£n",
                    JOptionPane.ERROR_MESSAGE);

            if (reason != null && !reason.trim().isEmpty()) {
                int result = JOptionPane.showConfirmDialog(AdminFrame.this,
                        "‚ö†Ô∏è C·∫¢NH B√ÅO: B·∫°n c√≥ ch·∫Øc mu·ªën X√ìA Vƒ®NH VI·ªÑN t√†i kho·∫£n " + accountNumber + "?\n" +
                                "H√†nh ƒë·ªông n√†y KH√îNG TH·ªÇ HO√ÄN T√ÅC!\n" +
                                "L√Ω do: " + reason,
                        "X√°c nh·∫≠n x√≥a t√†i kho·∫£n",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.ERROR_MESSAGE);

                if (result == JOptionPane.YES_OPTION) {
                    // X√°c nh·∫≠n l·∫ßn 2
                    String confirm = JOptionPane.showInputDialog(AdminFrame.this,
                            "ƒê·ªÉ x√°c nh·∫≠n x√≥a t√†i kho·∫£n, vui l√≤ng nh·∫≠p: DELETE",
                            "X√°c nh·∫≠n cu·ªëi c√πng",
                            JOptionPane.WARNING_MESSAGE);

                    if ("DELETE".equals(confirm)) {
                        try {
                            if (client.getBankService().deleteAccount(accountNumber)) {
                                JOptionPane.showMessageDialog(AdminFrame.this,
                                        "T√†i kho·∫£n " + accountNumber + " ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!\nL√Ω do: " + reason,
                                        "X√≥a t√†i kho·∫£n th√†nh c√¥ng",
                                        JOptionPane.INFORMATION_MESSAGE);
                                loadAccountsData(); // Refresh table
                            } else {
                                JOptionPane.showMessageDialog(AdminFrame.this,
                                        "X√≥a t√†i kho·∫£n th·∫•t b·∫°i!",
                                        "L·ªói",
                                        JOptionPane.ERROR_MESSAGE);
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(AdminFrame.this, "L·ªói: " + e.getMessage(), "L·ªói",
                                    JOptionPane.ERROR_MESSAGE);
                        }
                    } else if (confirm != null) {
                        JOptionPane.showMessageDialog(AdminFrame.this, "X√°c nh·∫≠n kh√¥ng ƒë√∫ng. H·ªßy b·ªè x√≥a t√†i kho·∫£n.",
                                "H·ªßy b·ªè", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }
        }

        private void showAdjustBalanceDialog(String accountNumber) {
            try {
                Account account = client.getBankService().getAccountInfo(accountNumber);
                if (account == null) {
                    JOptionPane.showMessageDialog(AdminFrame.this, "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!");
                    return;
                }

                JPanel panel = new JPanel(new GridLayout(4, 2, 10, 10));
                panel.add(new JLabel("S·ªë t√†i kho·∫£n:"));
                JTextField txtAccount = new JTextField(account.getAccountNumber());
                txtAccount.setEditable(false);
                panel.add(txtAccount);

                panel.add(new JLabel("T√™n ch·ªß t√†i kho·∫£n:"));
                JTextField txtName = new JTextField(account.getAccountHolder());
                txtName.setEditable(false);
                panel.add(txtName);

                panel.add(new JLabel("S·ªë d∆∞ hi·ªán t·∫°i:"));
                JTextField txtCurrentBalance = new JTextField(currencyFormat.format(account.getBalance()));
                txtCurrentBalance.setEditable(false);
                panel.add(txtCurrentBalance);

                panel.add(new JLabel("S·ªë ti·ªÅn ƒëi·ªÅu ch·ªânh (+/-):"));
                JTextField txtAmount = new JTextField();
                panel.add(txtAmount);

                JPanel reasonPanel = new JPanel(new GridLayout(1, 2, 10, 10));
                reasonPanel.add(new JLabel("L√Ω do ƒëi·ªÅu ch·ªânh:"));
                JTextField txtReason = new JTextField();
                reasonPanel.add(txtReason);

                JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
                mainPanel.add(panel, BorderLayout.CENTER);
                mainPanel.add(reasonPanel, BorderLayout.SOUTH);

                int result = JOptionPane.showConfirmDialog(AdminFrame.this, mainPanel,
                        "ƒêi·ªÅu ch·ªânh s·ªë d∆∞ t√†i kho·∫£n", JOptionPane.OK_CANCEL_OPTION);

                if (result == JOptionPane.OK_OPTION) {
                    try {
                        double amount = Double.parseDouble(txtAmount.getText());
                        String reason = txtReason.getText().trim();

                        if (reason.isEmpty()) {
                            JOptionPane.showMessageDialog(AdminFrame.this, "Vui l√≤ng nh·∫≠p l√Ω do ƒëi·ªÅu ch·ªânh!");
                            return;
                        }

                        boolean success = client.getBankService().adjustUserBalance(accountNumber, amount, reason);
                        if (success) {
                            double newBalance = account.getBalance() + amount;
                            String operation = amount > 0 ? "+" : "";
                            JOptionPane.showMessageDialog(AdminFrame.this,
                                    "ƒêi·ªÅu ch·ªânh s·ªë d∆∞ th√†nh c√¥ng!\n" +
                                            "T√†i kho·∫£n: " + accountNumber + "\n" +
                                            "S·ªë d∆∞ c≈©: " + currencyFormat.format(account.getBalance()) + "\n" +
                                            "ƒêi·ªÅu ch·ªânh: " + operation + currencyFormat.format(amount) + "\n" +
                                            "S·ªë d∆∞ m·ªõi: " + currencyFormat.format(newBalance) + "\n" +
                                            "L√Ω do: " + reason);
                            loadAccountsData(); // Refresh data
                        } else {
                            JOptionPane.showMessageDialog(AdminFrame.this, "ƒêi·ªÅu ch·ªânh s·ªë d∆∞ th·∫•t b·∫°i!");
                        }
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(AdminFrame.this, "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!");
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(AdminFrame.this, "L·ªói: " + e.getMessage());
            }
        }

        private void showChangePasswordDialog(String accountNumber) {
            try {
                Account account = client.getBankService().getAccountInfo(accountNumber);
                if (account == null) {
                    JOptionPane.showMessageDialog(AdminFrame.this, "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!");
                    return;
                }

                JPanel panel = new JPanel(new GridLayout(3, 2, 10, 10));
                panel.add(new JLabel("S·ªë t√†i kho·∫£n:"));
                JTextField txtAccount = new JTextField(account.getAccountNumber());
                txtAccount.setEditable(false);
                panel.add(txtAccount);

                panel.add(new JLabel("T√™n ch·ªß t√†i kho·∫£n:"));
                JTextField txtName = new JTextField(account.getAccountHolder());
                txtName.setEditable(false);
                panel.add(txtName);

                panel.add(new JLabel("M·∫≠t kh·∫©u m·ªõi:"));
                JPasswordField txtNewPassword = new JPasswordField();
                panel.add(txtNewPassword);

                int result = JOptionPane.showConfirmDialog(AdminFrame.this, panel,
                        "ƒê·ªïi m·∫≠t kh·∫©u cho t√†i kho·∫£n", JOptionPane.OK_CANCEL_OPTION);

                if (result == JOptionPane.OK_OPTION) {
                    String newPassword = new String(txtNewPassword.getPassword());
                    if (newPassword.trim().isEmpty()) {
                        JOptionPane.showMessageDialog(AdminFrame.this, "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
                        return;
                    }

                    boolean success = client.getBankService().changeUserPassword(accountNumber, newPassword);
                    if (success) {
                        JOptionPane.showMessageDialog(AdminFrame.this,
                                "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!\n" +
                                        "T√†i kho·∫£n: " + accountNumber + "\n" +
                                        "M·∫≠t kh·∫©u m·ªõi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.");
                    } else {
                        JOptionPane.showMessageDialog(AdminFrame.this, "ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i!");
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(AdminFrame.this, "L·ªói: " + e.getMessage());
            }
        }

        private void showUserHistoryDialog(String accountNumber) {
            try {
                List<Transaction> transactions = client.getBankService().getUserTransactionHistory(accountNumber);

                if (transactions == null || transactions.isEmpty()) {
                    JOptionPane.showMessageDialog(AdminFrame.this, "Kh√¥ng c√≥ l·ªãch s·ª≠ giao d·ªãch!");
                    return;
                }

                // T·∫°o history window m·ªõi
                JFrame historyFrame = new JFrame("L·ªãch s·ª≠ giao d·ªãch - " + accountNumber);
                historyFrame.setSize(800, 600);
                historyFrame.setLocationRelativeTo(AdminFrame.this);

                String[] columns = { "ID Giao d·ªãch", "Lo·∫°i", "S·ªë ti·ªÅn", "Th·ªùi gian", "M√¥ t·∫£" };
                DefaultTableModel historyTableModel = new DefaultTableModel(columns, 0);

                for (Transaction trans : transactions) {
                    Object[] row = {
                            trans.getTransactionId(),
                            trans.getType(),
                            currencyFormat.format(trans.getAmount()),
                            trans.getTimestamp(),
                            trans.getDescription()
                    };
                    historyTableModel.addRow(row);
                }

                JTable historyTable = new JTable(historyTableModel);
                historyTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                JScrollPane scrollPane = new JScrollPane(historyTable);

                JButton closeBtn = new JButton("ƒê√≥ng");
                closeBtn.addActionListener(e -> historyFrame.dispose());

                JPanel buttonPanel = new JPanel(new FlowLayout());
                buttonPanel.add(closeBtn);

                historyFrame.add(scrollPane, BorderLayout.CENTER);
                historyFrame.add(buttonPanel, BorderLayout.SOUTH);
                historyFrame.setVisible(true);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(AdminFrame.this, "L·ªói: " + e.getMessage());
            }
        }

        private void showDepositDialog(String accountNumber) {
            try {
                Account account = client.getBankService().getAccountInfo(accountNumber);
                if (account == null) {
                    JOptionPane.showMessageDialog(AdminFrame.this, "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!");
                    return;
                }

                JPanel panel = new JPanel(new GridLayout(4, 2, 10, 10));
                panel.add(new JLabel("S·ªë t√†i kho·∫£n:"));
                JTextField txtAccount = new JTextField(account.getAccountNumber());
                txtAccount.setEditable(false);
                panel.add(txtAccount);

                panel.add(new JLabel("T√™n ch·ªß t√†i kho·∫£n:"));
                JTextField txtName = new JTextField(account.getAccountHolder());
                txtName.setEditable(false);
                panel.add(txtName);

                panel.add(new JLabel("S·ªë d∆∞ hi·ªán t·∫°i:"));
                JTextField txtCurrentBalance = new JTextField(currencyFormat.format(account.getBalance()));
                txtCurrentBalance.setEditable(false);
                panel.add(txtCurrentBalance);

                panel.add(new JLabel("S·ªë ti·ªÅn n·∫°p (+):"));
                JTextField txtAmount = new JTextField();
                panel.add(txtAmount);

                JPanel reasonPanel = new JPanel(new GridLayout(1, 2, 10, 10));
                reasonPanel.add(new JLabel("L√Ω do n·∫°p ti·ªÅn:"));
                JTextField txtReason = new JTextField();
                reasonPanel.add(txtReason);

                JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
                mainPanel.add(panel, BorderLayout.CENTER);
                mainPanel.add(reasonPanel, BorderLayout.SOUTH);

                int result = JOptionPane.showConfirmDialog(AdminFrame.this, mainPanel,
                        "N·∫°p ti·ªÅn v√†o t√†i kho·∫£n", JOptionPane.OK_CANCEL_OPTION);

                if (result == JOptionPane.OK_OPTION) {
                    try {
                        double amount = Double.parseDouble(txtAmount.getText());
                        String reason = txtReason.getText().trim();

                        if (amount <= 0) {
                            JOptionPane.showMessageDialog(AdminFrame.this, "S·ªë ti·ªÅn n·∫°p ph·∫£i l·ªõn h∆°n 0!");
                            return;
                        }

                        if (reason.isEmpty()) {
                            JOptionPane.showMessageDialog(AdminFrame.this, "Vui l√≤ng nh·∫≠p l√Ω do n·∫°p ti·ªÅn!");
                            return;
                        }

                        boolean success = client.getBankService().adjustUserBalance(accountNumber, amount, reason);
                        if (success) {
                            double newBalance = account.getBalance() + amount;
                            JOptionPane.showMessageDialog(AdminFrame.this,
                                    "N·∫°p ti·ªÅn th√†nh c√¥ng!\n" +
                                            "T√†i kho·∫£n: " + accountNumber + "\n" +
                                            "S·ªë d∆∞ c≈©: " + currencyFormat.format(account.getBalance()) + "\n" +
                                            "S·ªë ti·ªÅn n·∫°p: +" + currencyFormat.format(amount) + "\n" +
                                            "S·ªë d∆∞ m·ªõi: " + currencyFormat.format(newBalance) + "\n" +
                                            "L√Ω do: " + reason);
                            loadAccountsData(); // Refresh data
                        } else {
                            JOptionPane.showMessageDialog(AdminFrame.this, "N·∫°p ti·ªÅn th·∫•t b·∫°i!");
                        }
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(AdminFrame.this, "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!");
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(AdminFrame.this, "L·ªói: " + e.getMessage());
            }
        }

        private void showWithdrawDialog(String accountNumber) {
            try {
                Account account = client.getBankService().getAccountInfo(accountNumber);
                if (account == null) {
                    JOptionPane.showMessageDialog(AdminFrame.this, "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!");
                    return;
                }

                JPanel panel = new JPanel(new GridLayout(4, 2, 10, 10));
                panel.add(new JLabel("S·ªë t√†i kho·∫£n:"));
                JTextField txtAccount = new JTextField(account.getAccountNumber());
                txtAccount.setEditable(false);
                panel.add(txtAccount);

                panel.add(new JLabel("T√™n ch·ªß t√†i kho·∫£n:"));
                JTextField txtName = new JTextField(account.getAccountHolder());
                txtName.setEditable(false);
                panel.add(txtName);

                panel.add(new JLabel("S·ªë d∆∞ hi·ªán t·∫°i:"));
                JTextField txtCurrentBalance = new JTextField(currencyFormat.format(account.getBalance()));
                txtCurrentBalance.setEditable(false);
                panel.add(txtCurrentBalance);

                panel.add(new JLabel("S·ªë ti·ªÅn r√∫t (-):"));
                JTextField txtAmount = new JTextField();
                panel.add(txtAmount);

                JPanel reasonPanel = new JPanel(new GridLayout(1, 2, 10, 10));
                reasonPanel.add(new JLabel("L√Ω do r√∫t ti·ªÅn:"));
                JTextField txtReason = new JTextField();
                reasonPanel.add(txtReason);

                JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
                mainPanel.add(panel, BorderLayout.CENTER);
                mainPanel.add(reasonPanel, BorderLayout.SOUTH);

                int result = JOptionPane.showConfirmDialog(AdminFrame.this, mainPanel,
                        "R√∫t ti·ªÅn t·ª´ t√†i kho·∫£n", JOptionPane.OK_CANCEL_OPTION);

                if (result == JOptionPane.OK_OPTION) {
                    try {
                        double amount = Double.parseDouble(txtAmount.getText());
                        String reason = txtReason.getText().trim();

                        if (amount <= 0) {
                            JOptionPane.showMessageDialog(AdminFrame.this, "S·ªë ti·ªÅn r√∫t ph·∫£i l·ªõn h∆°n 0!");
                            return;
                        }

                        if (reason.isEmpty()) {
                            JOptionPane.showMessageDialog(AdminFrame.this, "Vui l√≤ng nh·∫≠p l√Ω do r√∫t ti·ªÅn!");
                            return;
                        }

                        if (amount > account.getBalance()) {
                            JOptionPane.showMessageDialog(AdminFrame.this, "S·ªë ti·ªÅn r√∫t v∆∞·ª£t qu√° s·ªë d∆∞ hi·ªán t·∫°i!");
                            return;
                        }

                        boolean success = client.getBankService().adjustUserBalance(accountNumber, -amount, reason);
                        if (success) {
                            double newBalance = account.getBalance() - amount;
                            JOptionPane.showMessageDialog(AdminFrame.this,
                                    "R√∫t ti·ªÅn th√†nh c√¥ng!\n" +
                                            "T√†i kho·∫£n: " + accountNumber + "\n" +
                                            "S·ªë d∆∞ c≈©: " + currencyFormat.format(account.getBalance()) + "\n" +
                                            "S·ªë ti·ªÅn r√∫t: -" + currencyFormat.format(amount) + "\n" +
                                            "S·ªë d∆∞ m·ªõi: " + currencyFormat.format(newBalance) + "\n" +
                                            "L√Ω do: " + reason);
                            loadAccountsData(); // Refresh data
                        } else {
                            JOptionPane.showMessageDialog(AdminFrame.this, "R√∫t ti·ªÅn th·∫•t b·∫°i!");
                        }
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(AdminFrame.this, "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!");
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(AdminFrame.this, "L·ªói: " + e.getMessage());
            }
        }

        private void showViewPasswordDialog(String accountNumber) {
            try {
                String password = client.getBankService().getUserPassword(accountNumber);
                if (password == null) {
                    JOptionPane.showMessageDialog(AdminFrame.this, "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!");
                    return;
                }

                Account account = client.getBankService().getAccountInfo(accountNumber);

                JPanel panel = new JPanel(new GridLayout(3, 2, 10, 10));
                panel.add(new JLabel("S·ªë t√†i kho·∫£n:"));
                JTextField txtAccount = new JTextField(accountNumber);
                txtAccount.setEditable(false);
                panel.add(txtAccount);

                panel.add(new JLabel("T√™n ch·ªß t√†i kho·∫£n:"));
                JTextField txtName = new JTextField(account != null ? account.getAccountHolder() : "N/A");
                txtName.setEditable(false);
                panel.add(txtName);

                panel.add(new JLabel("M·∫≠t kh·∫©u:"));
                JTextField txtPassword = new JTextField(password);
                txtPassword.setEditable(false);
                txtPassword.setBackground(Color.YELLOW);
                panel.add(txtPassword);

                JOptionPane.showMessageDialog(AdminFrame.this, panel, "Th√¥ng tin m·∫≠t kh·∫©u t√†i kho·∫£n",
                        JOptionPane.INFORMATION_MESSAGE);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(AdminFrame.this, "L·ªói: " + e.getMessage());
            }
        }
    }

    // Ph∆∞∆°ng th·ª©c t·∫°o n√∫t modern v·ªõi rounded corners v√† hover effect
    private JButton createModernButton(String text, Color bgColor, Color textColor) {
        JButton button = new JButton(text) {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                int w = getWidth(), h = getHeight();
                int arc = 15; // Rounded corner radius

                // Background color with hover effect
                boolean hovered = Boolean.TRUE.equals(getClientProperty("hovered"));
                Color background = hovered ? bgColor.darker() : bgColor;
                g2d.setColor(background);
                g2d.fillRoundRect(0, 0, w, h, arc, arc);

                // Subtle border
                g2d.setColor(new Color(255, 255, 255, 100));
                g2d.drawRoundRect(0, 0, w - 1, h - 1, arc, arc);

                // Soft shadow
                g2d.setColor(new Color(0, 0, 0, 30));
                g2d.fillRoundRect(2, 2, w - 4, h - 4, arc, arc);

                super.paintComponent(g);
            }
        };

        button.setFont(new Font("Segoe UI", Font.BOLD, 14));
        button.setForeground(textColor);
        button.setFocusPainted(false);
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));

        // Add hover effect
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                JButton btn = (JButton) e.getSource();
                btn.putClientProperty("hovered", true);
                btn.repaint();
            }

            @Override
            public void mouseExited(MouseEvent e) {
                JButton btn = (JButton) e.getSource();
                btn.putClientProperty("hovered", false);
                btn.repaint();
            }
        });

        return button;
    }
}